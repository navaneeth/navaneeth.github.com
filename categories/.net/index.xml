<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on {love to code}</title>
    <link>https://navaneeth.github.io/categories/index.net/</link>
    <description>Recent content in .Net on {love to code}</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Feb 2013 12:59:50 +0530</lastBuildDate>
    <atom:link href="https://navaneeth.github.io/categories/.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with native code easily in C# with the help of C&#43;&#43;/CLI</title>
      <link>https://navaneeth.github.io/post/working-with-native-code-in-csharp-easily-with-cplusplus-cli/</link>
      <pubDate>Sun, 17 Feb 2013 12:59:50 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/working-with-native-code-in-csharp-easily-with-cplusplus-cli/</guid>
      <description>

&lt;p&gt;.NET comes with pretty good interoperability options which would enable unmanaged code to be used from a managed environment. In C#, to call a function which is available in a DLL, &lt;code&gt;PInvoke&lt;/code&gt; (Platform invocation service) can be used. Here is what MSDN says.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Platform Invocation Services (PInvoke) allows managed code to call unmanaged functions that are implemented in a DLL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is very helpful when you need to call some system functions from your C# application. Now let us assume that you have lot of code which is written in C or C++. You are writing a brand new application in C# which internally uses the C/C++ code available. Since C/C++ code is categorised as unmanaged code, you can&amp;rsquo;t directly use them in C#. At C# side, wrapper classes and functions has to be written to interop properly with the native code. As I said earlier, if you just need to use a single function, it is easy to do directly from C# using &lt;code&gt;PInvoke&lt;/code&gt;. But when you need almost all the functionalities/API to be available as a managed object, &lt;code&gt;PInvoke&lt;/code&gt; would be a pain to use. Let us take an example from &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa288468%28v=vs.71%29.aspx&#34;&gt;MSDN&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct tagLOGFONT
{
   LONG lfHeight;
   LONG lfWidth;
   LONG lfEscapement;
   LONG lfOrientation;
   LONG lfWeight;
   BYTE lfItalic;
   BYTE lfUnderline;
   BYTE lfStrikeOut;
   BYTE lfCharSet;
   BYTE lfOutPrecision;
   BYTE lfClipPrecision;
   BYTE lfQuality;
   BYTE lfPitchAndFamily;
   TCHAR lfFaceName[LF_FACESIZE];
} LOGFONT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In C#, this can be represented as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// logfont.cs
// compile with: /target:module
using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
public class LOGFONT
{
    public const int LF_FACESIZE = 32;
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;

    [MarshalAs(UnmanagedType.ByValTStr, SizeConst=LF_FACESIZE)]
    public string lfFaceName;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at the C# example. It is not as clean as the structure definition at the C side. It contains attributes which specify the structure alignment, then marshaling etc. When the structure contains references to other structures, things gets complicated.&lt;/p&gt;

&lt;p&gt;For C or C++ programmers, it is always convenient to declare the struct as they normally do. That&amp;rsquo;s the beauty of &lt;code&gt;C++/CLI&lt;/code&gt; which allows you to combine managed and unmanaged code together and makes interoperability very straightforward.&lt;/p&gt;

&lt;p&gt;In this post, we will take &lt;code&gt;SQLite&lt;/code&gt; as an example and write a managed class which can be consumed from C#. We will wrap SQLite code using &lt;code&gt;C++/CLI&lt;/code&gt; and consume from C#. SQLite has a huge API and we won&amp;rsquo;t be covering all of them. We will cover APIs which will allow to open a DB connection and execute a simple query.&lt;/p&gt;

&lt;p&gt;Note: SQLite is chosen as an example. The correct way to wrap SQLite is adhering to ADO.NET standards and providing a API by extending IDBConnection. But for this post, we will ignore this and provide a custom simple API.&lt;/p&gt;

&lt;h2 id=&#34;sqlite-api:7e82bd22871e49f5b795e67f510f204b&#34;&gt;SQLite API&lt;/h2&gt;

&lt;p&gt;We will wrap the following functions&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int sqlite3_open(const char *filename, sqlite3 **ppDb);
int sqlite3_exec(
  sqlite3*,                                  /* An open database */
  const char *sql,                           /* SQL to be evaluated */
  int (*callback)(void*,int,char**,char**),  /* Callback function */
  void *,                                    /* 1st argument to callback */
  char **errmsg                              /* Error msg written here */
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our managed API will look like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;SQLite db = new SQLite(filePath);
db.Execute(sql, callback);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; can be assigned to a function which takes 2 parameters of type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;. It will contain column names and values respectively.&lt;/p&gt;

&lt;h2 id=&#34;wrapper-class-in-c-cli:7e82bd22871e49f5b795e67f510f204b&#34;&gt;Wrapper class in C++/CLI&lt;/h2&gt;

&lt;p&gt;We will have a Visual studio solution with 3 projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static library which contains SQLite source code. This will be compiled as C and produces a static library.&lt;/li&gt;
&lt;li&gt;C++/CLI library project which adds the first project as a reference.&lt;/li&gt;
&lt;li&gt;A C# console application for testing. This project will have a reference to the assembly generated by C++/CLI project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://navaneeth.github.io/images/posts/20130217/solution_explorer.png&#34; alt=&#34;Solution explorer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In C++/CLI, we start off by creating the following class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// SQLiteWrapper.h

#pragma once

#include &amp;quot;sqlite3.h&amp;quot;

using namespace System;
using namespace System::Collections::Generic;

namespace SQLiteWrapper {

    // Main class that wraps the native API
    public ref class SQLite : IDisposable
    {
    public:
        SQLite(String^ filePath);
        void Execute(String^ sql, Action&amp;lt;List&amp;lt;String^&amp;gt;^, List&amp;lt;String^&amp;gt;^&amp;gt;^ callback);
        ~SQLite();

    private:
        sqlite3* db;
    };

    public ref class SQLiteError : Exception
    {
    public:
        SQLiteError(String^ errorMessage);
    };

    private ref class SQLiteDataCarrier
    {
    public:
        SQLiteDataCarrier(List&amp;lt;String^&amp;gt;^ columnNames, List&amp;lt;String^&amp;gt;^ columnValues)
        {
            this-&amp;gt;columnNames = columnNames;
            this-&amp;gt;columnValues = columnValues;
        }

        property List&amp;lt;String^&amp;gt;^ ColumnNames
        {
            List&amp;lt;String^&amp;gt;^ get()
            {
                return columnNames;
            }
        }

        property List&amp;lt;String^&amp;gt;^ ColumnValues
        {
            List&amp;lt;String^&amp;gt;^ get()
            {
                return columnValues;
            }
        }

    private:
        List&amp;lt;String^&amp;gt;^ columnNames;
        List&amp;lt;String^&amp;gt;^ columnValues;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class holds an instance to &lt;code&gt;sqlite3&lt;/code&gt; structure which is the core of SQLite library. Even though the class is a managed class, C++/CLI allows you to hold a pointer which points to &lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our constructor can be implemented like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Constructor for managed class SQLite
SQLite::SQLite(String^ filePath)
{
    IntPtr p = Marshal::StringToHGlobalAnsi(filePath);
    const char* _filePath = static_cast&amp;lt;const char*&amp;gt;(p.ToPointer());

    try
    {
        sqlite3* d;
        int status = sqlite3_open(_filePath, &amp;amp;d);
        if (status)
            throw gcnew SQLiteError(&amp;quot;Unable to open database&amp;quot;);


        // Holding the DB pointer as a field
        // This is a pointer to native struct, but it can be stored in managed class!
        db = d;
    }
    finally
    {
        Marshal::FreeHGlobal(p);

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code shows how well C++/CLI allows you to mix types from both managed and unmanaged world. It is beautiful!&lt;/p&gt;

&lt;p&gt;All this constructor does is to initialize &lt;code&gt;sqlite3&lt;/code&gt; instance and update the &lt;code&gt;db&lt;/code&gt; pointer with correct reference.&lt;/p&gt;

&lt;p&gt;Here is how &lt;code&gt;Execute()&lt;/code&gt; method is implemented.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Callback function called by SQLite.
// This function shows how native and managed objects can work together!
static int _callback(void *userData, int argc, char **argv, char **azColName)
{
    IntPtr pointer(userData);
    GCHandle handle = GCHandle::FromIntPtr(pointer);
    SQLiteDataCarrier^ carrier = (SQLiteDataCarrier^) handle.Target;

    for(int i = 0; i &amp;lt; argc; i++)
    {
        const char* columnName = azColName[i];
        const char* columnValue = argv[i];

        carrier-&amp;gt;ColumnNames-&amp;gt;Add(gcnew String(columnName));
        carrier-&amp;gt;ColumnValues-&amp;gt;Add(gcnew String(columnValue));
    }

    return 0;
}


void SQLite::Execute(String^ sql, Action&amp;lt;List&amp;lt;String^&amp;gt;^, List&amp;lt;String^&amp;gt;^&amp;gt;^ callback)
{
    IntPtr p = Marshal::StringToHGlobalAnsi(sql);
    const char* _sql = static_cast&amp;lt;const char*&amp;gt;(p.ToPointer());

    // Output will be stored in these lists
    List&amp;lt;String^&amp;gt;^ columnNames = gcnew List&amp;lt;String^&amp;gt;();
    List&amp;lt;String^&amp;gt;^ columnValues = gcnew List&amp;lt;String^&amp;gt;();

    // A simple class to aggregate columnNames and columnValues so that it can be passed to SQLite and SQLite will give it back in the callback function
    SQLiteDataCarrier^ carrier = gcnew SQLiteDataCarrier(columnNames, columnValues);

    // Converting carrier to void*
    GCHandle handle = GCHandle::Alloc(carrier);
    IntPtr pointer = GCHandle::ToIntPtr(handle);

    char *zErrMsg = 0;
    int status = sqlite3_exec(db, _sql, _callback, pointer.ToPointer(), &amp;amp;zErrMsg);
    if (status != SQLITE_OK)
    {
        String^ message = gcnew String(sqlite3_errmsg(db));
        throw gcnew SQLiteError(message);
    }

    callback-&amp;gt;Invoke(columnNames, columnValues);

    handle.Free();
    Marshal::FreeHGlobal(p);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add results into the list, we are passing both lists to the &lt;code&gt;sqlite3_exec()&lt;/code&gt; function so that SQLite will pass that back to the &lt;code&gt;_callback&lt;/code&gt; function. This is very powerful because we just passed a managed object into a native function call. Then in a native function, we obtained the managed instance and modified properties on it.&lt;/p&gt;

&lt;p&gt;Once the querying is done, database has to be closed. We do that in the destructor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// In C++/CLI destructor will be implemented using Dispose() pattern
SQLite::~SQLite()
{
    sqlite3_close(db);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-from-c:7e82bd22871e49f5b795e67f510f204b&#34;&gt;Using from C#&lt;/h2&gt;

&lt;p&gt;Usage from C# now becomes pretty straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            SQLite db = new SQLite(&amp;quot;C:\\Users\\navaneeth\\Desktop\\test\\example.db&amp;quot;);
            string sql = &amp;quot;create table if not exists foos (name text);\n&amp;quot; +
                &amp;quot;insert into foos values (&#39;sample1&#39;);&amp;quot; +
                &amp;quot;insert into foos values (&#39;sample2&#39;);&amp;quot; +
                &amp;quot;select * from foos;&amp;quot;;
            db.Execute(sql, (columnNames, columnValues) =&amp;gt; {
                foreach (var name in columnNames)
                {
                    Console.WriteLine(name);
                }
                foreach (var value in columnValues)
                {
                    Console.WriteLine(value);
                }
            });
            db.Dispose();
            Console.Read();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download the code &lt;a href=&#34;https://dl.dropbox.com/u/52296034/blog/SQLiteWrapper.zip&#34;&gt;here&lt;/a&gt;. Happy programming!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Great .NET Developers Ought To Know (More .NET Interview Questions and Answers) – Part1</title>
      <link>https://navaneeth.github.io/post/what-great-net-developers-ought-to-know-net-interview-questions-and-answers-part1/</link>
      <pubDate>Thu, 13 Aug 2009 12:59:50 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/what-great-net-developers-ought-to-know-net-interview-questions-and-answers-part1/</guid>
      <description>&lt;p&gt;In this series of posts, I will try to answer the questions posted by Scott Hanselman &lt;a href=&#34;http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx&#34;&gt;here&lt;/a&gt;. This part we will be seeing the first set of questions he has given under &lt;em&gt;Everyone who writes code&lt;/em&gt; heading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) Describe the difference between a Thread and a Process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Thread is a small unit of code in execution. A process is an instance of program which will have multiple threads running. A process can host multiple threads. Thread will always belong to a process. Communication between multiple processes are difficult but communication between threads is easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is a Windows Service and how does its lifecycle differ from a “standard” EXE?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows service is a long running program which can run without user interaction. It is used for applications that should work always, e.g: a HTTP server. Unlike standard EXE, a windows service can’t be started by double clicking the EXE. It should be installed on the system as a service using installutil tool. Service control manager manges a windows service by providing options to start/stop a service.&lt;/p&gt;

&lt;p&gt;Like a standard EXE, windows services lifecycle also begins from the main method. After that it fires the event OnStart in which you can write code for starting a service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is the difference between an EXE and a DLL?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A executable file(EXE) is ready to execute wherein a Dynamic Link Library(DLL) contains types and methods that can be used from a EXE. DLLs are not meant to be executed directly and it is very helpful to organize and isolate common code which can be used with multiple applications.&lt;/p&gt;

&lt;p&gt;Finally, EXE will have an entry point. DLLs will not have an entry point and all it does is to expose the types and methods. The direct equivalent of a DLL in LINUX is Shared Libraries(SO).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is strong-typing versus weak-typing? Which is preferred? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Strong-typing defines some restrictions on how operations are done when different data types are involved. Consider the following example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 10;
a = &amp;quot;You can&#39;t assign a string!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above code won’t compile as variable a is strongly-typed and it can hold only an integer value.&lt;/p&gt;

&lt;p&gt;Weak-typing is just opposite of strong-typing. C# is a strongly-typed language. But since most of the types derives from System.Object, you can write like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;object o = 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be called as weak-typing. Of course, strong-typing is preferred over weak-typing. To understand why, consider the following example in which we have a collection of age.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ArrayList ages = new ArrayList();
ages.Add(10);
ages.Add(20);
ages.Add(30);
ages.Add(&amp;quot;Hey, I am not an age!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our intention is to have only ages in this collection. But since ArrayList is weakly-typed, we inserted a value which is not an age. Here is a strongly-types version of this code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;List&amp;lt;int&amp;gt; ages = new List&amp;lt;int&amp;gt;();
ages.Add(10);
ages.Add(20);
ages.Add(30);
ages.Add(&amp;quot;I am not an age&amp;quot;); // &amp;lt;- compiler error here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Q) What is a PID? How is it useful when troubleshooting a system?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PID is Process Identifier and used by operating system to identify processes uniquely. I am not sure how it is used for troubleshooting. If some can provide insights into this, I will update this area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) How many processes can listen on a single TCP/IP port?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Only one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is the GAC? What problem does it solve?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GAC stands for Global Assembly Cache. It provides a centralized storage for assemblies that needs to be shared across applications. It solved the versioning problem and allows side-by-side execution. It can be used when assemblies require elevated permission to do the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ADO.NET best practices – Reading data from data reader</title>
      <link>https://navaneeth.github.io/post/ado-dot-net-best-practices-reading-data-from-data-reader/</link>
      <pubDate>Sat, 11 Jul 2009 12:59:50 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/ado-dot-net-best-practices-reading-data-from-data-reader/</guid>
      <description>

&lt;p&gt;I have seen many people using DataReader incorrectly. In this post, I will try to explain some good practices that can be followed when reading from a data reader. Consider the following problematic code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;SqlDataReader reader = /* ... */;
while (reader.Read())
{
    string userName = reader[&amp;quot;user_name&amp;quot;].ToString();
    int age = int.Parse( reader[&amp;quot;age&amp;quot;].ToString() );
    /* ... */
}
reader.Close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How many problems can you figure out from the above code? There are many problems with this code,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The columns “user_name” and “age” may or may not exist. If the column does not exist in the reader, it will throw error.&lt;/li&gt;
&lt;li&gt;You may be calling &lt;code&gt;ToString()&lt;/code&gt; on an object which may be pointing to &lt;code&gt;NULL&lt;/code&gt;. This will lead to a null reference exception.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SqlDataReader&lt;/code&gt; implements &lt;code&gt;IDisposable&lt;/code&gt; and user code has to call &lt;code&gt;Dispose()&lt;/code&gt; each time to release the resources deterministically. This is not happening here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reader[&amp;quot;age&amp;quot;]&lt;/code&gt; may contain values that are not compatible with integer. In such case, &lt;code&gt;int.Parse()&lt;/code&gt; will throw a &lt;code&gt;FormatException&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following sections will show a safe method to read data from DataReader.&lt;/p&gt;

&lt;h2 id=&#34;understanding-ordinals:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Understanding ordinals&lt;/h2&gt;

&lt;p&gt;Ordinal is the index of a column in the reader. &lt;code&gt;GetOrdinal()&lt;/code&gt; method will give you the ordinal for the column name supplied. So the first step in reading data from reader should be to find the ordinal of the columns which we want to read. Before getting the ordinal values, you have to ensure that the reader can read. SqlDataReader provides a HasRows property which can be useful here. Here is how you read the ordinals&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;SqlDataReader reader = /* ... */;
int userNameOrdinal;
int ageOrdinal;
if (reader.HasRows)
{
     try
     {
           userNameOrdinal = reader.GetOrdinal(&amp;quot;user_name&amp;quot;);
     }
     catch (IndexOutOfRangeException)
     {
           throw new YourCustomException(&amp;quot;Expected column &#39;user_name&#39; not found&amp;quot;);
     }
     try
     {
           ageOrdinal = reader.GetOrdinal(&amp;quot;age&amp;quot;);
     }
     catch (IndexOutOfRangeException)
     {
           throw new YourCustomException(&amp;quot;Expected column &#39;age&#39; not found&amp;quot;);
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have support to “Extension methods”, this code can be simplified further.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class SqlDataReaderExtensions
{
    public static int GetOrdinalOrThrow(this SqlDataReader reader, string columnName)
    {
        try
        {
            return reader.GetOrdinal(columnName);
        }
        catch (IndexOutOfRangeException)
        {
            throw new YourCustomException(string.Format(&amp;quot;Expected column &#39;{0}&#39; not found&amp;quot;,columnName));
        }
    }
}

SqlDataReader reader = /* ... */;
int userNameOrdinal;
int ageOrdinal;
if (reader.HasRows)
{
      userNameOrdinal = reader.GetOrdinalOrThrow(&amp;quot;user_name&amp;quot;);
      ageOrdinal = reader.GetOrdinalOrThrow(&amp;quot;age&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes the code more clean. However, I really wish to see a &lt;code&gt;TryGetOrdinal()&lt;/code&gt; method on &lt;code&gt;IDataReader&lt;/code&gt; so that we can save the cost of exception handling.&lt;/p&gt;

&lt;p&gt;GetOrdinal() method first does a case-sensitive lookup for the column name. If it fails, case-insensitive search is performed. Thus, using the column name in correct case with GetOrdinal() will be more efficient.&lt;/p&gt;

&lt;h2 id=&#34;respecting-type-safety:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Respecting type safety&lt;/h2&gt;

&lt;p&gt;C# is a strongly typed language and each programmer should take full advantage of this. Reading data like, &lt;code&gt;reader[&amp;quot;user_name&amp;quot;]&lt;/code&gt; is not a type safe way as it returns a object. Data reader provides methods to read data in a type safe way.&lt;/p&gt;

&lt;p&gt;Here is what MSDN says about it&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;When accessing column data use the typed accessors like GetString, GetInt32, and so on. This saves you the processing required to cast the Object returned from GetValue as a particular type.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let us follow the above suggestion and rewrite our code like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;while (reader.Read())
{
   string userName = reader.GetString(userNameOrdinal);
   int age = -1;
   try
   {
         age = reader.GetInt32(ageOrdinal);
   }
   catch (InvalidCastException)
   {
         throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
   }
   /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;releasing-resources:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Releasing resources&lt;/h2&gt;

&lt;p&gt;If any type implements IDisposable, it is like saying “I have something to release explicitly rather than garbage collector to release it“. So it is programmers duty to ensure the calls to Dispose() when using disposable types. C# has “using” statement (stack semantics can be used in C++/CLI) which will ensure calls to Dispose(). Since DataReader is a disposable object, we can write like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using(SqlDataReader reader = command.ExecuteReader())
{
      while (reader.Read())
      {
          string userName = reader.GetString(userNameOrdinal);
          int age = -1;
          try
          {
              age = reader.GetInt32(ageOrdinal);
          }
          catch (InvalidCastException)
          {
              throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
          }
          /* ... */
      }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures that the reader is disposed properly even in exceptional situations.&lt;/p&gt;

&lt;h2 id=&#34;putting-everything-together:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Putting everything together&lt;/h2&gt;

&lt;p&gt;If you put everything together, code will be like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class SqlDataReaderExtensions
{
    public static int GetOrdinalOrThrow(this SqlDataReader reader, string columnName)
    {
        try
        {
            return reader.GetOrdinal(columnName);
        }
        catch (IndexOutOfRangeException)
        {
            throw new YourCustomException(string.Format(&amp;quot;Expected column &#39;{0}&#39; not found&amp;quot;,columnName));
        }
    }
}

int userNameOrdinal = -1;
int ageOrdinal = -1;
if (reader.HasRows)
{
    userNameOrdinal = reader.GetOrdinalOrThrow(&amp;quot;user_name&amp;quot;);
    ageOrdinal = reader.GetOrdinalOrThrow(&amp;quot;age&amp;quot;);
}
using (SqlDataReader reader = GetReader())
{
    while (reader.Read())
    {
        string userName = reader.GetString(userNameOrdinal);
        int age = -1;
        try
        {
            age = reader.GetInt32(ageOrdinal);
        }
        catch (InvalidCastException)
        {
            throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
        }
        /* ... */
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have got clean code now. It handles the exceptions and throws informative exceptions to the caller rather than throwing Boneheaded exceptions, we have avoided explicit casting and DataReader is disposed properly.&lt;/p&gt;

&lt;p&gt;These are applicable for all types which implements &lt;code&gt;IDataReader&lt;/code&gt;. &lt;code&gt;SqlDataReader&lt;/code&gt; is used in this post just for explanation.&lt;/p&gt;

&lt;p&gt;Happy programming!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>