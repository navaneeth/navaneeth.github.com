<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on {love to code}</title>
    <link>https://navaneeth.github.io/categories/c/</link>
    <description>Recent content in C on {love to code}</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2015 10:50:48 +0530</lastBuildDate>
    
	<atom:link href="https://navaneeth.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Function strdup implicitly converted to pointer</title>
      <link>https://navaneeth.github.io/post/function-strdup-implicitly-converted-to-pointer/</link>
      <pubDate>Thu, 21 May 2015 10:50:48 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/function-strdup-implicitly-converted-to-pointer/</guid>
      <description>I was trying to make a debian package for libvarnam. Lot of work went into making the package ready. Debian has very strict rules about how the packaging should be done. Debian also marks few errors as fatal and which may require a code change to fix it. One of the errors I faced was the following:
 Our automated build log filter detected the problem(s) above that will likely cause your package to segfault on architectures where the size of a pointer is greater than the size of an integer, such as ia64 and amd64.</description>
    </item>
    
    <item>
      <title>Channels in libuv</title>
      <link>https://navaneeth.github.io/post/channels-in-libuv/</link>
      <pubDate>Fri, 02 Aug 2013 12:59:50 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/channels-in-libuv/</guid>
      <description>go programming language provides a very powerful synchronization mechanism called channels. Channels simplifies communication between threads and makes it very easy to send and receive data from go routines.
I always missed such functionalities when using libuv. libuv has uv async_send, but it can be used only to wakeup the event loop. In this post, we will implement channels in C using libuv. The idea is to implement a channel so that user can use it without worrying about manually doing the synchronization.</description>
    </item>
    
    <item>
      <title>Simple, generic and dynamically allocated array in C</title>
      <link>https://navaneeth.github.io/post/simple-generic-and-dynamically-allocated-array-in-c/</link>
      <pubDate>Fri, 11 May 2012 12:59:50 +0530</pubDate>
      
      <guid>https://navaneeth.github.io/post/simple-generic-and-dynamically-allocated-array-in-c/</guid>
      <description>C is a very good language. I have been using for quite some time for my opensource project. The flexibility C offers is really good. But sometimes, lack of simple datastructures like a dynamically growing array will slow down the programmer. There are tons of implementation available online, but most of them are overcomplicated, got lot of dependencies or tough to understand and incorporate with your application. In this post, I present a simple array which grows dynamically, reuses the memory, supports any pointer type and easy to copy to your code base.</description>
    </item>
    
  </channel>
</rss>