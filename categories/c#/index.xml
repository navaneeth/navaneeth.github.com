<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on {love to code}</title>
    <link>http://blog.nkn.io/categories/c/</link>
    <description>Recent content in C# on {love to code}</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2013 12:59:50 +0530</lastBuildDate>
    <atom:link href="http://blog.nkn.io/categories/c" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Is Thread.Sleep() evil?</title>
      <link>http://blog.nkn.io/post/is-thread-dot-sleep-evil/</link>
      <pubDate>Tue, 19 Feb 2013 12:59:50 +0530</pubDate>
      
      <guid>http://blog.nkn.io/post/is-thread-dot-sleep-evil/</guid>
      <description>&lt;p&gt;If you search for this topic, you will find lots of information and many of them claiming &lt;code&gt;Thread.Sleep()&lt;/code&gt; is evil. However, I think this evilness is mostly dependent on which context &lt;code&gt;Thread.Sleep()&lt;/code&gt; is used.&lt;/p&gt;

&lt;p&gt;You might have seen code like the below one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;while (!exit)
{
    DoWork();
    Thread.Sleep(10000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code example does some work and sleeps for 1 minute before does the job again. This simple example has some potential issues.&lt;/p&gt;

&lt;p&gt;Internally &lt;code&gt;Thread.Sleep()&lt;/code&gt; calls WIN32&amp;rsquo;s &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298%28v=vs.85%29.aspx&#34;&gt;Sleep&lt;/a&gt; function. This is what MSDN says about Sleep function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This function causes a thread to relinquish the remainder of its time slice and become unrunnable for an interval based on the value of dwMilliseconds. The system clock &amp;ldquo;ticks&amp;rdquo; at a constant rate. If dwMilliseconds is less than the resolution of the system clock, the thread may sleep for less than the specified length of time. If dwMilliseconds is greater than one tick but less than two, the wait can be anywhere between one and two ticks, and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is clear that &lt;code&gt;Sleep()&lt;/code&gt; won&amp;rsquo;t sleep exactly for the interval specified. This can be problematic if your application needs to be accurate with the intervals. This is also dependent on how much load CPU has. If CPU is really overloaded, this time could be longer. This also makes it hard to tell when the job will run next time. If you have done some action which needs to be processed by the background job and not knowing when background job will kick in next time is bad.&lt;/p&gt;

&lt;p&gt;If your thread is running with a low priority, sleep duration could be more than the specified interval.&lt;/p&gt;

&lt;p&gt;If you are trying to implement something which runs periodically, use &lt;code&gt;System.Threading.Timer&lt;/code&gt; class which provides better scheduling capabilities. It runs the callback at specified intervals on a thread pool thread.&lt;/p&gt;

&lt;p&gt;Is &lt;code&gt;Thread.Sleep()&lt;/code&gt; really evil? NO, if you understand all the above problems and you are OK with the above behaviour. Yes otherwise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circular linked list – An implementation using C#</title>
      <link>http://blog.nkn.io/post/circular-linked-list-an-implementation-using-c-number/</link>
      <pubDate>Tue, 18 Aug 2009 12:59:50 +0530</pubDate>
      
      <guid>http://blog.nkn.io/post/circular-linked-list-an-implementation-using-c-number/</guid>
      <description>

&lt;p&gt;In this post, I will explain about creating a circular doubly linked list using C#. .NET framework provides a doubly linked list implementation in System.Collections.Generic.LinkedList&lt;T&gt; class . But this class is not providing the behavior of a circular linked list and it is very tough to extend for supporting circular linked list requirements.&lt;/p&gt;

&lt;p&gt;In a normal doubly linked list, each node will have a link to its previous and next nodes. In a circular doubly linked list, tail node’s next node will be head and head node’s previous node will be tail. Here is an image taken from wikipedia which visualizes circular linked list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/posts/circular_linked_list.png&#34; alt=&#34;Alt text&#34; title=&#34;Circular linked list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is our requirements for the circular linked list&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding items to the list should be O(1).&lt;/li&gt;
&lt;li&gt;Provide similar interface like the standard LinkedList&lt;T&gt; class.&lt;/li&gt;
&lt;li&gt;Keep items in a type-safe way.&lt;/li&gt;
&lt;li&gt;Avoid using collections like List or array internally for keeping items.&lt;/li&gt;
&lt;li&gt;Should provide access to Head and Tail&lt;/li&gt;
&lt;li&gt;Option to enumerate all items&lt;/li&gt;
&lt;li&gt;Reverse enumeration&lt;/li&gt;
&lt;li&gt;Access items with an index.&lt;/li&gt;
&lt;li&gt;Maintain collection semantics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the class diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/posts/classdiagram1.png&#34; alt=&#34;Alt text&#34; title=&#34;Class diagram&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;node-lt-t-gt-class:c4b153d1621eb531bb575e5dfac92e1a&#34;&gt;Node&amp;lt;T&amp;gt; class&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Every problem can be solved by adding another layer of indirection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node class is a layer of indirection added to hold the linked list value. It manages the next and previous items and provides an option to get the current value. This class is immutable. Here is Node class looks like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/// &amp;lt;summary&amp;gt;
/// Represents a node
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;&amp;lt;/typeparam&amp;gt;
[DebuggerDisplay(&amp;quot;Value = {Value}&amp;quot;)]
public sealed class Node&amp;lt;T&amp;gt;
{
    /// &amp;lt;summary&amp;gt;
    /// Gets the Value
    /// &amp;lt;/summary&amp;gt;
    public T Value { get; private set; }

    /// &amp;lt;summary&amp;gt;
    /// Gets next node
    /// &amp;lt;/summary&amp;gt;
    public Node&amp;lt;T&amp;gt; Next { get; internal set; }

    /// &amp;lt;summary&amp;gt;
    /// Gets previous node
    /// &amp;lt;/summary&amp;gt;
    public Node&amp;lt;T&amp;gt; Previous { get; internal set; }

    /// &amp;lt;summary&amp;gt;
    /// Initializes a new &amp;lt;see cref=&amp;quot;Node&amp;quot;/&amp;gt; instance
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;Value to be assigned&amp;lt;/param&amp;gt;
    internal Node(T item)
    {
        this.Value = item;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;circularlinkedlist-lt-t-gt-class:c4b153d1621eb531bb575e5dfac92e1a&#34;&gt;CircularLinkedList&amp;lt;T&amp;gt; class&lt;/h2&gt;

&lt;p&gt;Keeping the requirements in mind, let us start writing the generic CircularLinkedList&lt;T&gt;. Some linked list implementations maintains only a link to the head node and when adding a new item to the list, each node in the list has to be traveled till tail node is found and this gives O(n) complexity for the algorithm.&lt;/p&gt;

&lt;p&gt;Maintaining link to head and tail helps us to do insertions with a O(1) complexity. In such cases, list traversal is not required. All we need is to change the pointer in the tail node. Head and tail node are member variables of CircularLinkedList class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public sealed class CircularLinkedList&amp;lt;T&amp;gt;
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Node head = null;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Node tail = null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add an item to the last, we need to create a new node from the supplied item. Set the new node’s next pointer pointing to the list’s head and previous pointing to the tail. Finally, tail will be replaced with the new node. Here is the &lt;code&gt;AddLast()&lt;/code&gt; method implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void AddLast(T item)
{
    // if head is null, then this will be the first item
    if (head == null)
        this.AddFirstItem(item);
    else
    {
        Node&amp;lt;T&amp;gt; newNode = new Node&amp;lt;T&amp;gt;(item);
        tail.Next = newNode;
        newNode.Next = head;
        newNode.Previous = tail;
        tail = newNode;
        head.Previous = tail;
    }
    ++count;
}

void AddFirstItem(T item)
{
    head = new Node&amp;lt;T&amp;gt;(item);
    tail = head;
    head.Next = tail;
    head.Previous = tail;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can easily add another method that will add item to the first position in the list. Implementation looks similar like &lt;code&gt;AddLast()&lt;/code&gt;. Unlike &lt;code&gt;AddLast()&lt;/code&gt;, head node’s previous pointer will be re-pointed to the new node. The new node’s previous and next pointer will be pointed to tail and head respectively. Finally head will be replaced with the new node.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void AddFirst(T item)
{
    if (head == null)
        this.AddFirstItem(item);
    else
    {
        Node&amp;lt;T&amp;gt; newNode = new Node&amp;lt;T&amp;gt;(item);
        head.Previous = newNode;
        newNode.Previous = tail;
        newNode.Next = head;
        tail.Next = newNode;
        head = newNode;
    }
    ++count;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finding an item from the list will have a &lt;code&gt;O(n)&lt;/code&gt; complexity as it needs to traverse through all items in the list until we get a matching item. Here is a recursive implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Node&amp;lt;T&amp;gt; Find(T item)
{
    Node&amp;lt;T&amp;gt; node = FindNode(head, item);
    return node;
}

Node&amp;lt;T&amp;gt; FindNode(Node&amp;lt;T&amp;gt; node, T valueToCompare)
{
    Node&amp;lt;T&amp;gt; result = null;
    if (comparer.Equals(node.Value, valueToCompare))
        result = node;
    else if (result == null &amp;amp;&amp;amp; node.Next != head)
        result = FindNode(node.Next, valueToCompare);
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Providing an iterator to iterate the items in the list will be useful. Since this is a circular linked list, a reverse iterator also makes sense. &lt;code&gt;yield&lt;/code&gt; keyword makes iterator implementations almost trivial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public IEnumerator&amp;lt;T&amp;gt; GetEnumerator()
{
    Node&amp;lt;T&amp;gt; current = head;
    if (current != null)
    {
        do
        {
            yield return current.Value;
            current = current.Next;
        } while (current != head);
    }
}

public IEnumerator&amp;lt;T&amp;gt; GetReverseEnumerator()
{
    Node&amp;lt;T&amp;gt; current = tail;
    if (current != null)
    {
        do
        {
            yield return current.Value;
            current = current.Previous;
        } while (current != tail);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Removing items from list is also just re-pointing the previous and next pointers of the node’s previous.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool Remove(T item)
{
    // finding the first occurance of this item
    Node&amp;lt;T&amp;gt; nodeToRemove = this.Find(item);
    if (nodeToRemove != null)
        return this.RemoveNode(nodeToRemove);
    return false;
}

bool RemoveNode(Node&amp;lt;T&amp;gt; nodeToRemove)
{
    Node&amp;lt;T&amp;gt; previous = nodeToRemove.Previous;
    previous.Next = nodeToRemove.Next;
    nodeToRemove.Next.Previous = nodeToRemove.Previous;

    // if this is head, we need to update the head reference
    if (head == nodeToRemove)
        head = nodeToRemove.Next;
    else if (tail == nodeToRemove)
        tail = tail.Previous;

    --count;
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, an indexer is provided so that list items can be accessed using an index. Like &lt;code&gt;Find()&lt;/code&gt; method, this also has a &lt;code&gt;O(n)&lt;/code&gt; complexity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Node&amp;lt;T&amp;gt; this[int index]
{
    get
    {
        if (index &amp;gt;= count || index &amp;lt; 0)
            throw new ArgumentOutOfRangeException(&amp;quot;index&amp;quot;);
        else
        {
            Node&amp;lt;T&amp;gt; node = this.head;
            for (int i = 0; i &amp;lt; index; i++)
                node = node.Next;
            return node;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get a collection semantics and maintain similar interface like the standard LinkedList, we implement &lt;code&gt;ICollection&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public sealed class CircularLinkedList&amp;lt;T&amp;gt; : ICollection&amp;lt;T&amp;gt;, IEnumerable&amp;lt;T&amp;gt;
{
    // code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-harness:c4b153d1621eb531bb575e5dfac92e1a&#34;&gt;Test harness&lt;/h2&gt;

&lt;p&gt;Following code shows how this class can be used,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)
{
    CircularLinkedList&amp;lt;int&amp;gt; list = new CircularLinkedList&amp;lt;int&amp;gt;();
    list.AddLast(1);
    list.AddLast(2);
    list.AddLast(3);
    Console.WriteLine(&amp;quot;List count = {0}&amp;quot;, list.Count);
    Console.WriteLine(&amp;quot;Head  = {0}&amp;quot;, list.Head.Value);
    Console.WriteLine(&amp;quot;Tail  = {0}&amp;quot;, list.Tail.Value);
    Console.WriteLine(&amp;quot;Head&#39;s Previous  = {0}&amp;quot;, list.Head.Previous.Value);
    Console.WriteLine(&amp;quot;Tail&#39;s Next  = {0}&amp;quot;, list.Tail.Next.Value);
    Console.WriteLine(&amp;quot;************List Items***********&amp;quot;);
    foreach (int i in list)
        Console.WriteLine(i);

    Console.WriteLine(&amp;quot;************List Items in reverse***********&amp;quot;);
    for (IEnumerator&amp;lt;int&amp;gt; r = list.GetReverseEnumerator(); r.MoveNext(); )
        Console.WriteLine(r.Current);

    Console.WriteLine(&amp;quot;************Adding a new item at first***********&amp;quot;);
    list.AddFirst(0);
    foreach (int i in list)
        Console.WriteLine(i);

    Console.WriteLine(&amp;quot;************Adding item before***********&amp;quot;);
    list.AddBefore(2,11);
    foreach (int i in list)
        Console.WriteLine(i);

    Console.WriteLine(&amp;quot;************Adding item after***********&amp;quot;);
    list.AddAfter(3, 4);
    foreach (int i in list)
        Console.WriteLine(i);

    Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;possible-expansions:c4b153d1621eb531bb575e5dfac92e1a&#34;&gt;Possible expansions&lt;/h2&gt;

&lt;p&gt;There are good and complex features that can be added to this list. Here are few that will be useful,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove duplicate nodes.&lt;/li&gt;
&lt;li&gt;Move nodes around.&lt;/li&gt;
&lt;li&gt;Sorting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probably we will see these features in another post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Great .NET Developers Ought To Know (More .NET Interview Questions and Answers) – Part1</title>
      <link>http://blog.nkn.io/post/what-great-net-developers-ought-to-know-net-interview-questions-and-answers-part1/</link>
      <pubDate>Thu, 13 Aug 2009 12:59:50 +0530</pubDate>
      
      <guid>http://blog.nkn.io/post/what-great-net-developers-ought-to-know-net-interview-questions-and-answers-part1/</guid>
      <description>&lt;p&gt;In this series of posts, I will try to answer the questions posted by Scott Hanselman &lt;a href=&#34;http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx&#34;&gt;here&lt;/a&gt;. This part we will be seeing the first set of questions he has given under &lt;em&gt;Everyone who writes code&lt;/em&gt; heading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) Describe the difference between a Thread and a Process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Thread is a small unit of code in execution. A process is an instance of program which will have multiple threads running. A process can host multiple threads. Thread will always belong to a process. Communication between multiple processes are difficult but communication between threads is easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is a Windows Service and how does its lifecycle differ from a “standard” EXE?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows service is a long running program which can run without user interaction. It is used for applications that should work always, e.g: a HTTP server. Unlike standard EXE, a windows service can’t be started by double clicking the EXE. It should be installed on the system as a service using installutil tool. Service control manager manges a windows service by providing options to start/stop a service.&lt;/p&gt;

&lt;p&gt;Like a standard EXE, windows services lifecycle also begins from the main method. After that it fires the event OnStart in which you can write code for starting a service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is the difference between an EXE and a DLL?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A executable file(EXE) is ready to execute wherein a Dynamic Link Library(DLL) contains types and methods that can be used from a EXE. DLLs are not meant to be executed directly and it is very helpful to organize and isolate common code which can be used with multiple applications.&lt;/p&gt;

&lt;p&gt;Finally, EXE will have an entry point. DLLs will not have an entry point and all it does is to expose the types and methods. The direct equivalent of a DLL in LINUX is Shared Libraries(SO).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is strong-typing versus weak-typing? Which is preferred? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Strong-typing defines some restrictions on how operations are done when different data types are involved. Consider the following example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int a = 10;
a = &amp;quot;You can&#39;t assign a string!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above code won’t compile as variable a is strongly-typed and it can hold only an integer value.&lt;/p&gt;

&lt;p&gt;Weak-typing is just opposite of strong-typing. C# is a strongly-typed language. But since most of the types derives from System.Object, you can write like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;object o = 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be called as weak-typing. Of course, strong-typing is preferred over weak-typing. To understand why, consider the following example in which we have a collection of age.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ArrayList ages = new ArrayList();
ages.Add(10);
ages.Add(20);
ages.Add(30);
ages.Add(&amp;quot;Hey, I am not an age!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our intention is to have only ages in this collection. But since ArrayList is weakly-typed, we inserted a value which is not an age. Here is a strongly-types version of this code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;List&amp;lt;int&amp;gt; ages = new List&amp;lt;int&amp;gt;();
ages.Add(10);
ages.Add(20);
ages.Add(30);
ages.Add(&amp;quot;I am not an age&amp;quot;); // &amp;lt;- compiler error here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Q) What is a PID? How is it useful when troubleshooting a system?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PID is Process Identifier and used by operating system to identify processes uniquely. I am not sure how it is used for troubleshooting. If some can provide insights into this, I will update this area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) How many processes can listen on a single TCP/IP port?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Only one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q) What is the GAC? What problem does it solve?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GAC stands for Global Assembly Cache. It provides a centralized storage for assemblies that needs to be shared across applications. It solved the versioning problem and allows side-by-side execution. It can be used when assemblies require elevated permission to do the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ADO.NET best practices – Reading data from data reader</title>
      <link>http://blog.nkn.io/post/ado-dot-net-best-practices-reading-data-from-data-reader/</link>
      <pubDate>Sat, 11 Jul 2009 12:59:50 +0530</pubDate>
      
      <guid>http://blog.nkn.io/post/ado-dot-net-best-practices-reading-data-from-data-reader/</guid>
      <description>

&lt;p&gt;I have seen many people using DataReader incorrectly. In this post, I will try to explain some good practices that can be followed when reading from a data reader. Consider the following problematic code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;SqlDataReader reader = /* ... */;
while (reader.Read())
{
    string userName = reader[&amp;quot;user_name&amp;quot;].ToString();
    int age = int.Parse( reader[&amp;quot;age&amp;quot;].ToString() );
    /* ... */
}
reader.Close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How many problems can you figure out from the above code? There are many problems with this code,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The columns “user_name” and “age” may or may not exist. If the column does not exist in the reader, it will throw error.&lt;/li&gt;
&lt;li&gt;You may be calling &lt;code&gt;ToString()&lt;/code&gt; on an object which may be pointing to &lt;code&gt;NULL&lt;/code&gt;. This will lead to a null reference exception.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SqlDataReader&lt;/code&gt; implements &lt;code&gt;IDisposable&lt;/code&gt; and user code has to call &lt;code&gt;Dispose()&lt;/code&gt; each time to release the resources deterministically. This is not happening here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reader[&amp;quot;age&amp;quot;]&lt;/code&gt; may contain values that are not compatible with integer. In such case, &lt;code&gt;int.Parse()&lt;/code&gt; will throw a &lt;code&gt;FormatException&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following sections will show a safe method to read data from DataReader.&lt;/p&gt;

&lt;h2 id=&#34;understanding-ordinals:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Understanding ordinals&lt;/h2&gt;

&lt;p&gt;Ordinal is the index of a column in the reader. &lt;code&gt;GetOrdinal()&lt;/code&gt; method will give you the ordinal for the column name supplied. So the first step in reading data from reader should be to find the ordinal of the columns which we want to read. Before getting the ordinal values, you have to ensure that the reader can read. SqlDataReader provides a HasRows property which can be useful here. Here is how you read the ordinals&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;SqlDataReader reader = /* ... */;
int userNameOrdinal;
int ageOrdinal;
if (reader.HasRows)
{
     try
     {
           userNameOrdinal = reader.GetOrdinal(&amp;quot;user_name&amp;quot;);
     }
     catch (IndexOutOfRangeException)
     {
           throw new YourCustomException(&amp;quot;Expected column &#39;user_name&#39; not found&amp;quot;);
     }
     try
     {
           ageOrdinal = reader.GetOrdinal(&amp;quot;age&amp;quot;);
     }
     catch (IndexOutOfRangeException)
     {
           throw new YourCustomException(&amp;quot;Expected column &#39;age&#39; not found&amp;quot;);
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have support to “Extension methods”, this code can be simplified further.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class SqlDataReaderExtensions
{
    public static int GetOrdinalOrThrow(this SqlDataReader reader, string columnName)
    {
        try
        {
            return reader.GetOrdinal(columnName);
        }
        catch (IndexOutOfRangeException)
        {
            throw new YourCustomException(string.Format(&amp;quot;Expected column &#39;{0}&#39; not found&amp;quot;,columnName));
        }
    }
}

SqlDataReader reader = /* ... */;
int userNameOrdinal;
int ageOrdinal;
if (reader.HasRows)
{
      userNameOrdinal = reader.GetOrdinalOrThrow(&amp;quot;user_name&amp;quot;);
      ageOrdinal = reader.GetOrdinalOrThrow(&amp;quot;age&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes the code more clean. However, I really wish to see a &lt;code&gt;TryGetOrdinal()&lt;/code&gt; method on &lt;code&gt;IDataReader&lt;/code&gt; so that we can save the cost of exception handling.&lt;/p&gt;

&lt;p&gt;GetOrdinal() method first does a case-sensitive lookup for the column name. If it fails, case-insensitive search is performed. Thus, using the column name in correct case with GetOrdinal() will be more efficient.&lt;/p&gt;

&lt;h2 id=&#34;respecting-type-safety:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Respecting type safety&lt;/h2&gt;

&lt;p&gt;C# is a strongly typed language and each programmer should take full advantage of this. Reading data like, &lt;code&gt;reader[&amp;quot;user_name&amp;quot;]&lt;/code&gt; is not a type safe way as it returns a object. Data reader provides methods to read data in a type safe way.&lt;/p&gt;

&lt;p&gt;Here is what MSDN says about it&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;When accessing column data use the typed accessors like GetString, GetInt32, and so on. This saves you the processing required to cast the Object returned from GetValue as a particular type.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let us follow the above suggestion and rewrite our code like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;while (reader.Read())
{
   string userName = reader.GetString(userNameOrdinal);
   int age = -1;
   try
   {
         age = reader.GetInt32(ageOrdinal);
   }
   catch (InvalidCastException)
   {
         throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
   }
   /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;releasing-resources:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Releasing resources&lt;/h2&gt;

&lt;p&gt;If any type implements IDisposable, it is like saying “I have something to release explicitly rather than garbage collector to release it“. So it is programmers duty to ensure the calls to Dispose() when using disposable types. C# has “using” statement (stack semantics can be used in C++/CLI) which will ensure calls to Dispose(). Since DataReader is a disposable object, we can write like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using(SqlDataReader reader = command.ExecuteReader())
{
      while (reader.Read())
      {
          string userName = reader.GetString(userNameOrdinal);
          int age = -1;
          try
          {
              age = reader.GetInt32(ageOrdinal);
          }
          catch (InvalidCastException)
          {
              throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
          }
          /* ... */
      }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures that the reader is disposed properly even in exceptional situations.&lt;/p&gt;

&lt;h2 id=&#34;putting-everything-together:0cd52065e9b2dd1b300f1283c1b80438&#34;&gt;Putting everything together&lt;/h2&gt;

&lt;p&gt;If you put everything together, code will be like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class SqlDataReaderExtensions
{
    public static int GetOrdinalOrThrow(this SqlDataReader reader, string columnName)
    {
        try
        {
            return reader.GetOrdinal(columnName);
        }
        catch (IndexOutOfRangeException)
        {
            throw new YourCustomException(string.Format(&amp;quot;Expected column &#39;{0}&#39; not found&amp;quot;,columnName));
        }
    }
}

int userNameOrdinal = -1;
int ageOrdinal = -1;
if (reader.HasRows)
{
    userNameOrdinal = reader.GetOrdinalOrThrow(&amp;quot;user_name&amp;quot;);
    ageOrdinal = reader.GetOrdinalOrThrow(&amp;quot;age&amp;quot;);
}
using (SqlDataReader reader = GetReader())
{
    while (reader.Read())
    {
        string userName = reader.GetString(userNameOrdinal);
        int age = -1;
        try
        {
            age = reader.GetInt32(ageOrdinal);
        }
        catch (InvalidCastException)
        {
            throw new YourCustomException(&amp;quot;Unable to read age. Expecting integer value&amp;quot;);
        }
        /* ... */
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have got clean code now. It handles the exceptions and throws informative exceptions to the caller rather than throwing Boneheaded exceptions, we have avoided explicit casting and DataReader is disposed properly.&lt;/p&gt;

&lt;p&gt;These are applicable for all types which implements &lt;code&gt;IDataReader&lt;/code&gt;. &lt;code&gt;SqlDataReader&lt;/code&gt; is used in this post just for explanation.&lt;/p&gt;

&lt;p&gt;Happy programming!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>